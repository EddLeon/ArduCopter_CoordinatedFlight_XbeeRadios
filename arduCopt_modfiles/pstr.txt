Binary file AP_State.cpp.o matches
ArduCopter.cpp:        gcs_send_text_fmt(PSTR("PERF: %u/%u %lu %lu\n"),
Binary file ArduCopter.cpp.o matches
Binary file Attitude.cpp.o matches
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("compass disabled\n"));
begin:compassmot.cpp:            gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("check compass"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("RC not calibrated"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("thr not zero"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Not landed"));
begin:compassmot.cpp:    gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("STARTING CALIBRATION"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("CURRENT"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("THROTTLE"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Calibration Successful!"));
begin:compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Failed!"));
begin:flight_mode.cpp:        port->print_P(PSTR("STABILIZE"));
begin:flight_mode.cpp:        port->print_P(PSTR("ACRO"));
begin:flight_mode.cpp:        port->print_P(PSTR("ALT_HOLD"));
begin:flight_mode.cpp:        port->print_P(PSTR("AUTO"));
begin:flight_mode.cpp:        port->print_P(PSTR("GUIDED"));
begin:flight_mode.cpp:        port->print_P(PSTR("LOITER"));
begin:flight_mode.cpp:        port->print_P(PSTR("RTL"));
begin:flight_mode.cpp:        port->print_P(PSTR("CIRCLE"));
begin:flight_mode.cpp:        port->print_P(PSTR("LAND"));
begin:flight_mode.cpp:        port->print_P(PSTR("OF_LOITER"));
begin:flight_mode.cpp:        port->print_P(PSTR("DRIFT"));
begin:flight_mode.cpp:        port->print_P(PSTR("SPORT"));
begin:flight_mode.cpp:        port->print_P(PSTR("FLIP"));
begin:flight_mode.cpp:        port->print_P(PSTR("AUTOTUNE"));
begin:flight_mode.cpp:        port->print_P(PSTR("POSHOLD"));
begin:flight_mode.cpp:        port->print_P(PSTR("BRAKE"));
begin:flight_mode.cpp:        port->printf_P(PSTR("Mode(%u)"), (unsigned)mode);
begin:Log.cpp:    cliSerial->printf_P(PSTR("logs enabled: "));
begin:Log.cpp:        cliSerial->printf_P(PSTR("none"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_ATTITUDE_FAST) cliSerial->printf_P(PSTR(" ATTITUDE_FAST"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_ATTITUDE_MED) cliSerial->printf_P(PSTR(" ATTITUDE_MED"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_GPS) cliSerial->printf_P(PSTR(" GPS"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_PM) cliSerial->printf_P(PSTR(" PM"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_CTUN) cliSerial->printf_P(PSTR(" CTUN"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_NTUN) cliSerial->printf_P(PSTR(" NTUN"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_RCIN) cliSerial->printf_P(PSTR(" RCIN"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_IMU) cliSerial->printf_P(PSTR(" IMU"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_CMD) cliSerial->printf_P(PSTR(" CMD"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_CURRENT) cliSerial->printf_P(PSTR(" CURRENT"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_RCOUT) cliSerial->printf_P(PSTR(" RCOUT"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_OPTFLOW) cliSerial->printf_P(PSTR(" OPTFLOW"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_COMPASS) cliSerial->printf_P(PSTR(" COMPASS"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_CAMERA) cliSerial->printf_P(PSTR(" CAMERA"));
begin:Log.cpp:        if (g.log_bitmask & MASK_LOG_PID) cliSerial->printf_P(PSTR(" PID"));
begin:Log.cpp:        cliSerial->printf_P(PSTR("dumping all\n"));
begin:Log.cpp:        cliSerial->printf_P(PSTR("bad log number\n"));
begin:Log.cpp:        cliSerial->printf_P(PSTR("missing log type\n"));
begin:Log.cpp:    cliSerial->printf_P(PSTR("\n" FIRMWARE_STRING
begin:Log.cpp:    cliSerial->println_P(PSTR(HAL_BOARD_NAME));
begin:motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Interlock/E-Stop Conflict"));
begin:motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: EKF-home variance"));
begin:motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: RC not calibrated"));
begin:motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: vehicle not landed"));
begin:motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: Safety Switch"));
begin:Parameters.cpp:        cliSerial->printf_P(PSTR("Bad var table\n"));
begin:Parameters.cpp:        hal.scheduler->panic(PSTR("Bad var table"));
begin:Parameters.cpp:        cliSerial->printf_P(PSTR("Firmware change: erasing EEPROM...\n"));
begin:Parameters.cpp:        cliSerial->println_P(PSTR("done."));
begin:Parameters.cpp:        cliSerial->printf_P(PSTR("load_all took %luus\n"), micros() - before);
begin:sensors.cpp:        cliSerial->println_P(PSTR("COMPASS INIT ERROR"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Setup Mode\n\n\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("\n'Y' = factory reset, any other key to abort:\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("\nReboot board"));
begin:setup.cpp:        cliSerial->printf_P(PSTR("Invalid command. Usage: set <name> <value>\n"));
begin:setup.cpp:        cliSerial->printf_P(PSTR("Param not found: %s\n"), argv[1].str);
begin:setup.cpp:                cliSerial->printf_P(PSTR("Value out of range for type INT8\n"));
begin:setup.cpp:                cliSerial->printf_P(PSTR("Value out of range for type INT16\n"));
begin:setup.cpp:            cliSerial->printf_P(PSTR("Cannot set parameter of type %d.\n"), p_type);
begin:setup.cpp:            cliSerial->printf_P(PSTR("Parameter not found: '%s'\n"), argv[1]);
begin:setup.cpp:		cliSerial->printf_P(PSTR("Pls provide Channel Mask\n"
begin:setup.cpp:		cliSerial->printf_P(PSTR("no channels chosen"));
begin:setup.cpp:    //cliSerial->printf_P(PSTR("\n%d\n"),set_mask);
begin:setup.cpp:	cliSerial->printf_P(PSTR("\nATTENTION, please remove or fix propellers before starting calibration!\n"
begin:setup.cpp:				cliSerial->printf_P(PSTR("ESC calibration exited\n"));
begin:setup.cpp:				cliSerial->printf_P(PSTR("ESC calibration aborted\n"));
begin:setup.cpp:	cliSerial->printf_P(PSTR("Outputs armed\n"));
begin:setup.cpp:	cliSerial->printf_P(PSTR("\nHigh PWM set: %d\n"
begin:setup.cpp:			cliSerial->printf_P(PSTR("ESC calibration exited\n"));
begin:setup.cpp:	cliSerial->printf_P(PSTR("Low PWM set: %d\n"
begin:setup.cpp:			cliSerial->printf_P(PSTR("ESC calibration exited\n"));
begin:setup.cpp:	cliSerial->printf_P(PSTR("Outputs disarmed\n"));
begin:setup.cpp:	cliSerial->printf_P(PSTR("ESC calibration finished\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("\nBatt Mon:\n"));
begin:setup.cpp:        cliSerial->printf_P(PSTR("volts"));
begin:setup.cpp:        cliSerial->printf_P(PSTR("volts and cur"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Quad frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("TRI frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Hexa frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Y6 frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Octa frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Heli frame\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Radio\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("INS\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Flight modes\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("OptFlow\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH1: %d | %d\n"), (int)channel_roll->radio_min, (int)channel_roll->radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH2: %d | %d\n"), (int)channel_pitch->radio_min, (int)channel_pitch->radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH3: %d | %d\n"), (int)channel_throttle->radio_min, (int)channel_throttle->radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH4: %d | %d\n"), (int)channel_yaw->radio_min, (int)channel_yaw->radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH5: %d | %d\n"), (int)g.rc_5.radio_min, (int)g.rc_5.radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH6: %d | %d\n"), (int)g.rc_6.radio_min, (int)g.rc_6.radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH7: %d | %d\n"), (int)g.rc_7.radio_min, (int)g.rc_7.radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("CH8: %d | %d\n"), (int)g.rc_8.radio_min, (int)g.rc_8.radio_max);
begin:setup.cpp:    cliSerial->printf_P(PSTR("Pos %d:\t"),p);
begin:setup.cpp:    cliSerial->printf_P(PSTR(",\t\tSimple: "));
begin:setup.cpp:        cliSerial->printf_P(PSTR("ON\n"));
begin:setup.cpp:        cliSerial->printf_P(PSTR("OFF\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("A_off: %4.2f, %4.2f, %4.2f\nA_scale: %4.2f, %4.2f, %4.2f\n"),
begin:setup.cpp:    cliSerial->printf_P(PSTR("G_off: %4.2f, %4.2f, %4.2f\n"),
begin:setup.cpp:    cliSerial->printf_P(PSTR("Compass\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("Mag Dec: %4.4f\n"),
begin:setup.cpp:        cliSerial->printf_P(PSTR("Mag%d off: %4.4f, %4.4f, %4.4f\n"),
begin:setup.cpp:    cliSerial->print_P(PSTR("Motor Comp: "));
begin:setup.cpp:        cliSerial->print_P(PSTR("Off\n"));
begin:setup.cpp:            cliSerial->print_P(PSTR("Throttle"));
begin:setup.cpp:            cliSerial->print_P(PSTR("Current"));
begin:setup.cpp:            cliSerial->printf_P(PSTR("\nComMot%d: %4.2f, %4.2f, %4.2f\n"),
begin:setup.cpp:        cliSerial->print_P(PSTR("-"));
begin:setup.cpp:        cliSerial->print_P(PSTR("en"));
begin:setup.cpp:        cliSerial->print_P(PSTR("dis"));
begin:setup.cpp:    cliSerial->print_P(PSTR("abled\n"));
begin:setup.cpp:    cliSerial->printf_P(PSTR("FW Ver: %d\n"),(int)g.k_format_version);
begin:system.cpp:    cliSerial->printf_P(PSTR("Commands:\n"
begin:system.cpp:    cliSerial->printf_P(PSTR("\n\nInit " FIRMWARE_STRING
begin:system.cpp:    cliSerial->print_P(PSTR("\nReady to FLY "));
begin:test.cpp:            cliSerial->println_P(PSTR("not healthy"));
begin:test.cpp:            cliSerial->printf_P(PSTR("Alt: %0.2fm, Raw: %f Temperature: %.1f\n"),
begin:test.cpp:        cliSerial->printf_P(PSTR("Compass: "));
begin:test.cpp:        cliSerial->println_P(PSTR("Compass initialisation failed!"));
begin:test.cpp:                    cliSerial->printf_P(PSTR("Heading: %ld, XYZ: %.0f, %.0f, %.0f,\tXYZoff: %6.2f, %6.2f, %6.2f\n"),
begin:test.cpp:                    cliSerial->println_P(PSTR("compass not healthy"));
begin:test.cpp:    cliSerial->println_P(PSTR("saving offsets"));
begin:test.cpp:    cliSerial->printf_P(PSTR("INS\n"));
begin:test.cpp:    cliSerial->printf_P(PSTR("...done\n"));
begin:test.cpp:        cliSerial->printf_P(PSTR("a %7.4f %7.4f %7.4f g %7.4f %7.4f %7.4f t %7.4f \n"),
begin:test.cpp:        cliSerial->printf_P(PSTR("dev id: %d\t"),(int)optflow.device_id());
begin:test.cpp:            cliSerial->printf_P(PSTR("flowX : %7.4f\t flowY : %7.4f\t flow qual : %d\n"),
begin:test.cpp:        cliSerial->printf_P(PSTR("OptFlow: "));
begin:test.cpp:        cliSerial->printf_P(PSTR("Relay on\n"));
begin:test.cpp:        cliSerial->printf_P(PSTR("Relay off\n"));
begin:test.cpp:    cliSerial->printf_P(PSTR("RangeFinder: %d devices detected\n"), sonar.num_sensors());
begin:test.cpp:        cliSerial->printf_P(PSTR("Primary: status %d distance_cm %d \n"), (int)sonar.status(), sonar.distance_cm());
begin:test.cpp:        cliSerial->printf_P(PSTR("All: device_0 type %d status %d distance_cm %d, device_1 type %d status %d distance_cm %d\n"),
begin:test.cpp:    cliSerial->printf_P(PSTR("Hit Enter to exit.\n\n"));
Binary file commands.cpp.o matches
commands_logic.cpp:        gcs_send_text_fmt(PSTR("Reached Command #%i"),cmd.index);
commands_logic.cpp:        gcs_send_text_fmt(PSTR("Reached Command #%i"),cmd.index);
Binary file commands_logic.cpp.o matches
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("compass disabled\n"));
compassmot.cpp:            gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("check compass"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("RC not calibrated"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("thr not zero"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Not landed"));
compassmot.cpp:    gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("STARTING CALIBRATION"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("CURRENT"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("THROTTLE"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Calibration Successful!"));
compassmot.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH, PSTR("Failed!"));
Binary file compassmot.cpp.o matches
Binary file compat.cpp.o matches
Binary file control_acro.cpp.o matches
Binary file control_althold.cpp.o matches
Binary file control_auto.cpp.o matches
control_autotune.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("AutoTune: Started"));
control_autotune.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("AutoTune: Stopped"));
control_autotune.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("AutoTune: Success"));
control_autotune.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("AutoTune: Failed"));
control_autotune.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("AutoTune: Saved Gains"));
Binary file control_autotune.cpp.o matches
Binary file control_brake.cpp.o matches
Binary file control_circle.cpp.o matches
Binary file control_drift.cpp.o matches
Binary file control_flip.cpp.o matches
Binary file control_guided.cpp.o matches
Binary file control_land.cpp.o matches
Binary file control_loiter.cpp.o matches
Binary file control_poshold.cpp.o matches
Binary file control_rtl.cpp.o matches
Binary file control_sport.cpp.o matches
Binary file control_stabilize.cpp.o matches
Binary file Copter.cpp.o matches
crash_check.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Crash: Disarming"));
crash_check.cpp:    gcs_send_text_P(SEVERITY_HIGH,PSTR("Parachute: Released!"));
crash_check.cpp:        gcs_send_text_P(SEVERITY_HIGH,PSTR("Parachute: Landed"));
crash_check.cpp:        gcs_send_text_P(SEVERITY_HIGH,PSTR("Parachute: Too Low"));
Binary file crash_check.cpp.o matches
ekf_check.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("EKF variance"));
Binary file ekf_check.cpp.o matches
esc_calibration.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("ESC Calibration: restart board"));
esc_calibration.cpp:    gcs_send_text_P(SEVERITY_HIGH,PSTR("ESC Calibration: passing pilot throttle to ESCs"));
esc_calibration.cpp:    gcs_send_text_P(SEVERITY_HIGH,PSTR("ESC Calibration: auto calibration"));
esc_calibration.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("ESC Calibration: push safety switch"));
Binary file esc_calibration.cpp.o matches
events.cpp:    gcs_send_text_P(SEVERITY_HIGH,PSTR("Low Battery!"));
Binary file events.cpp.o matches
Binary file failsafe.cpp.o matches
Binary file fence.cpp.o matches
flight_mode.cpp:        port->print_P(PSTR("STABILIZE"));
flight_mode.cpp:        port->print_P(PSTR("ACRO"));
flight_mode.cpp:        port->print_P(PSTR("ALT_HOLD"));
flight_mode.cpp:        port->print_P(PSTR("AUTO"));
flight_mode.cpp:        port->print_P(PSTR("GUIDED"));
flight_mode.cpp:        port->print_P(PSTR("LOITER"));
flight_mode.cpp:        port->print_P(PSTR("RTL"));
flight_mode.cpp:        port->print_P(PSTR("CIRCLE"));
flight_mode.cpp:        port->print_P(PSTR("LAND"));
flight_mode.cpp:        port->print_P(PSTR("OF_LOITER"));
flight_mode.cpp:        port->print_P(PSTR("DRIFT"));
flight_mode.cpp:        port->print_P(PSTR("SPORT"));
flight_mode.cpp:        port->print_P(PSTR("FLIP"));
flight_mode.cpp:        port->print_P(PSTR("AUTOTUNE"));
flight_mode.cpp:        port->print_P(PSTR("POSHOLD"));
flight_mode.cpp:        port->print_P(PSTR("BRAKE"));
flight_mode.cpp:        port->printf_P(PSTR("Mode(%u)"), (unsigned)mode);
Binary file flight_mode.cpp.o matches
GCS_Mavlink.cpp:        send_text_P(SEVERITY_LOW, PSTR(FIRMWARE_STRING));
GCS_Mavlink.cpp:        send_text_P(SEVERITY_LOW, PSTR("PX4: " PX4_GIT_VERSION " NuttX: " NUTTX_GIT_VERSION));
GCS_Mavlink.cpp:        send_text_P(SEVERITY_LOW, PSTR("Frame: " FRAME_CONFIG_STRING));
GCS_Mavlink.cpp:            send_text_P(SEVERITY_LOW,PSTR("bad rally point message ID"));
GCS_Mavlink.cpp:            send_text_P(SEVERITY_LOW,PSTR("bad rally point message count"));
GCS_Mavlink.cpp:            send_text_P(SEVERITY_HIGH, PSTR("error setting rally point"));
GCS_Mavlink.cpp:        //send_text_P(SEVERITY_HIGH, PSTR("## getting rally point in GCS_Mavlink.cpp 1")); // #### TEMP
GCS_Mavlink.cpp:        //send_text_P(SEVERITY_HIGH, PSTR("## getting rally point in GCS_Mavlink.cpp 2")); // #### TEMP
GCS_Mavlink.cpp:            send_text_P(SEVERITY_LOW, PSTR("bad rally point index"));
GCS_Mavlink.cpp:        //send_text_P(SEVERITY_HIGH, PSTR("## getting rally point in GCS_Mavlink.cpp 3")); // #### TEMP
GCS_Mavlink.cpp:           send_text_P(SEVERITY_LOW, PSTR("failed to set rally point"));
GCS_Mavlink.cpp:        //send_text_P(SEVERITY_HIGH, PSTR("## getting rally point in GCS_Mavlink.cpp 4")); // #### TEMP
GCS_Mavlink.cpp:        //send_text_P(SEVERITY_HIGH, PSTR("## getting rally point in GCS_Mavlink.cpp 5")); // #### TEMP
GCS_Mavlink.cpp:        gcs_send_text_P(SEVERITY_LOW, PSTR("Initialising APM..."));
Binary file GCS_Mavlink.cpp.o matches
Binary file heli.cpp.o matches
Binary file heli_control_acro.cpp.o matches
Binary file heli_control_stabilize.cpp.o matches
Binary file inertia.cpp.o matches
Binary file landing_gear.cpp.o matches
Binary file land_detector.cpp.o matches
Binary file leds.cpp.o matches
Log.cpp:    cliSerial->printf_P(PSTR("logs enabled: "));
Log.cpp:        cliSerial->printf_P(PSTR("none"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_ATTITUDE_FAST) cliSerial->printf_P(PSTR(" ATTITUDE_FAST"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_ATTITUDE_MED) cliSerial->printf_P(PSTR(" ATTITUDE_MED"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_GPS) cliSerial->printf_P(PSTR(" GPS"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_PM) cliSerial->printf_P(PSTR(" PM"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_CTUN) cliSerial->printf_P(PSTR(" CTUN"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_NTUN) cliSerial->printf_P(PSTR(" NTUN"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_RCIN) cliSerial->printf_P(PSTR(" RCIN"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_IMU) cliSerial->printf_P(PSTR(" IMU"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_CMD) cliSerial->printf_P(PSTR(" CMD"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_CURRENT) cliSerial->printf_P(PSTR(" CURRENT"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_RCOUT) cliSerial->printf_P(PSTR(" RCOUT"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_OPTFLOW) cliSerial->printf_P(PSTR(" OPTFLOW"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_COMPASS) cliSerial->printf_P(PSTR(" COMPASS"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_CAMERA) cliSerial->printf_P(PSTR(" CAMERA"));
Log.cpp:        if (g.log_bitmask & MASK_LOG_PID) cliSerial->printf_P(PSTR(" PID"));
Log.cpp:        cliSerial->printf_P(PSTR("dumping all\n"));
Log.cpp:        cliSerial->printf_P(PSTR("bad log number\n"));
Log.cpp:        cliSerial->printf_P(PSTR("missing log type\n"));
Log.cpp:    if (!strcasecmp_P(argv[1].str, PSTR("all"))) {
Log.cpp: #define TARG(_s)        if (!strcasecmp_P(argv[1].str, PSTR(# _s))) bits |= MASK_LOG_ ## _s
Log.cpp:    if (!strcasecmp_P(argv[0].str, PSTR("enable"))) {
Log.cpp:    gcs_send_text_P(SEVERITY_HIGH, PSTR("Erasing logs\n"));
Log.cpp:    gcs_send_text_P(SEVERITY_HIGH, PSTR("Log erase complete\n"));
Log.cpp:    DataFlash.Log_Write_Message_P(PSTR("New mission"));
Log.cpp:    cliSerial->printf_P(PSTR("\n" FIRMWARE_STRING
Log.cpp:    cliSerial->println_P(PSTR(HAL_BOARD_NAME));
Log.cpp:            DataFlash.Log_Write_Message_P(PSTR(FIRMWARE_STRING));
Log.cpp:            DataFlash.Log_Write_Message_P(PSTR("PX4: " PX4_GIT_VERSION " NuttX: " NUTTX_GIT_VERSION));
Log.cpp:            DataFlash.Log_Write_Message_P(PSTR("Frame: " FRAME_CONFIG_STRING));
Log.cpp:        gcs_send_text_P(SEVERITY_HIGH, PSTR("No dataflash inserted"));
Log.cpp:        gcs_send_text_P(SEVERITY_HIGH, PSTR("ERASING LOGS"));
Binary file Log.cpp.o matches
motors.cpp:    gcs_send_text_P(SEVERITY_HIGH, PSTR("ARMING MOTORS"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Gyro calibration failed"));
motors.cpp:        gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Motor Interlock Enabled"));
motors.cpp:        gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Motor Emergency Stopped"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Interlock/E-Stop Conflict"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Motor Interlock Enabled"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Motor Emergency Stopped"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: RC not calibrated"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Barometer not healthy"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Altitude disparity"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Compass not healthy"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Compass not calibrated"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Compass offsets too high"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Check mag field"));
motors.cpp:                        gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: inconsistent compasses"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: check fence"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Accels not calibrated"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Accelerometers not healthy"));
motors.cpp:                        gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: inconsistent Accelerometers"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Gyros not healthy"));
motors.cpp:                        gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: inconsistent Gyros"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Check Board Voltage"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Duplicate Aux Switch Options"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Check FS_THR_VALUE"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Check ANGLE_MAX"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: ACRO_BAL_ROLL/PITCH"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: check range finder"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Waiting for Nav Checks"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: Need 3D Fix"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: EKF-home variance"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("PreArm: High GPS HDOP"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Waiting for Nav Checks"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Mode not armable"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Rotor Control Engaged"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Altitude disparity"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Leaning"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Collective below Failsafe"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Throttle below Failsafe"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Collective too high"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Throttle too high"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Collective too high"));
motors.cpp:                    gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Throttle too high"));
motors.cpp:            gcs_send_text_P(SEVERITY_HIGH,PSTR("Arm: Safety Switch"));
motors.cpp:    gcs_send_text_P(SEVERITY_HIGH, PSTR("DISARMING MOTORS"));
motors.cpp:                gcs_send_text_P(SEVERITY_HIGH,PSTR("Locate Copter Alarm!"));
Binary file motors.cpp.o matches
motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: RC not calibrated"));
motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: vehicle not landed"));
motor_test.cpp:        gcs[chan-MAVLINK_COMM_0].send_text_P(SEVERITY_HIGH,PSTR("Motor Test: Safety Switch"));
Binary file motor_test.cpp.o matches
Binary file navigation.cpp.o matches
Parameters.cpp:        cliSerial->printf_P(PSTR("Bad var table\n"));
Parameters.cpp:        hal.scheduler->panic(PSTR("Bad var table"));
Parameters.cpp:        cliSerial->printf_P(PSTR("Firmware change: erasing EEPROM...\n"));
Parameters.cpp:        cliSerial->println_P(PSTR("done."));
Parameters.cpp:        cliSerial->printf_P(PSTR("load_all took %luus\n"), micros() - before);
Binary file Parameters.cpp.o matches
Binary file perf_info.cpp.o matches
Binary file position_vector.cpp.o matches
Binary file radio.cpp.o matches
sensors.cpp:    gcs_send_text_P(SEVERITY_LOW, PSTR("Calibrating barometer"));
sensors.cpp:    gcs_send_text_P(SEVERITY_LOW, PSTR("barometer calibration complete"));
sensors.cpp:        cliSerial->println_P(PSTR("COMPASS INIT ERROR"));
Binary file sensors.cpp.o matches
setup.cpp:    cliSerial->printf_P(PSTR("Setup Mode\n\n\n"));
setup.cpp:    cliSerial->printf_P(PSTR("\n'Y' = factory reset, any other key to abort:\n"));
setup.cpp:    cliSerial->printf_P(PSTR("\nReboot board"));
setup.cpp:        cliSerial->printf_P(PSTR("Invalid command. Usage: set <name> <value>\n"));
setup.cpp:        cliSerial->printf_P(PSTR("Param not found: %s\n"), argv[1].str);
setup.cpp:                cliSerial->printf_P(PSTR("Value out of range for type INT8\n"));
setup.cpp:                cliSerial->printf_P(PSTR("Value out of range for type INT16\n"));
setup.cpp:            cliSerial->printf_P(PSTR("Cannot set parameter of type %d.\n"), p_type);
setup.cpp:            cliSerial->printf_P(PSTR("Parameter not found: '%s'\n"), argv[1]);
setup.cpp:		cliSerial->printf_P(PSTR("Pls provide Channel Mask\n"
setup.cpp:		cliSerial->printf_P(PSTR("no channels chosen"));
setup.cpp:    //cliSerial->printf_P(PSTR("\n%d\n"),set_mask);
setup.cpp:	cliSerial->printf_P(PSTR("\nATTENTION, please remove or fix propellers before starting calibration!\n"
setup.cpp:				cliSerial->printf_P(PSTR("ESC calibration exited\n"));
setup.cpp:				cliSerial->printf_P(PSTR("ESC calibration aborted\n"));
setup.cpp:	cliSerial->printf_P(PSTR("Outputs armed\n"));
setup.cpp:	cliSerial->printf_P(PSTR("\nHigh PWM set: %d\n"
setup.cpp:			cliSerial->printf_P(PSTR("ESC calibration exited\n"));
setup.cpp:	cliSerial->printf_P(PSTR("Low PWM set: %d\n"
setup.cpp:			cliSerial->printf_P(PSTR("ESC calibration exited\n"));
setup.cpp:	cliSerial->printf_P(PSTR("Outputs disarmed\n"));
setup.cpp:	cliSerial->printf_P(PSTR("ESC calibration finished\n"));
setup.cpp:    cliSerial->printf_P(PSTR("\nBatt Mon:\n"));
setup.cpp:        cliSerial->printf_P(PSTR("volts"));
setup.cpp:        cliSerial->printf_P(PSTR("volts and cur"));
setup.cpp:    cliSerial->printf_P(PSTR("Frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Quad frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("TRI frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Hexa frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Y6 frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Octa frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Heli frame\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Radio\n"));
setup.cpp:    cliSerial->printf_P(PSTR("INS\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Flight modes\n"));
setup.cpp:    cliSerial->printf_P(PSTR("OptFlow\n"));
setup.cpp:    cliSerial->printf_P(PSTR("CH1: %d | %d\n"), (int)channel_roll->radio_min, (int)channel_roll->radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH2: %d | %d\n"), (int)channel_pitch->radio_min, (int)channel_pitch->radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH3: %d | %d\n"), (int)channel_throttle->radio_min, (int)channel_throttle->radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH4: %d | %d\n"), (int)channel_yaw->radio_min, (int)channel_yaw->radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH5: %d | %d\n"), (int)g.rc_5.radio_min, (int)g.rc_5.radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH6: %d | %d\n"), (int)g.rc_6.radio_min, (int)g.rc_6.radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH7: %d | %d\n"), (int)g.rc_7.radio_min, (int)g.rc_7.radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("CH8: %d | %d\n"), (int)g.rc_8.radio_min, (int)g.rc_8.radio_max);
setup.cpp:    cliSerial->printf_P(PSTR("Pos %d:\t"),p);
setup.cpp:    cliSerial->printf_P(PSTR(",\t\tSimple: "));
setup.cpp:        cliSerial->printf_P(PSTR("ON\n"));
setup.cpp:        cliSerial->printf_P(PSTR("OFF\n"));
setup.cpp:    cliSerial->printf_P(PSTR("A_off: %4.2f, %4.2f, %4.2f\nA_scale: %4.2f, %4.2f, %4.2f\n"),
setup.cpp:    cliSerial->printf_P(PSTR("G_off: %4.2f, %4.2f, %4.2f\n"),
setup.cpp:    cliSerial->printf_P(PSTR("Compass\n"));
setup.cpp:    cliSerial->printf_P(PSTR("Mag Dec: %4.4f\n"),
setup.cpp:        cliSerial->printf_P(PSTR("Mag%d off: %4.4f, %4.4f, %4.4f\n"),
setup.cpp:    cliSerial->print_P(PSTR("Motor Comp: "));
setup.cpp:        cliSerial->print_P(PSTR("Off\n"));
setup.cpp:            cliSerial->print_P(PSTR("Throttle"));
setup.cpp:            cliSerial->print_P(PSTR("Current"));
setup.cpp:            cliSerial->printf_P(PSTR("\nComMot%d: %4.2f, %4.2f, %4.2f\n"),
setup.cpp:        cliSerial->print_P(PSTR("-"));
setup.cpp:        cliSerial->print_P(PSTR("en"));
setup.cpp:        cliSerial->print_P(PSTR("dis"));
setup.cpp:    cliSerial->print_P(PSTR("abled\n"));
setup.cpp:    cliSerial->printf_P(PSTR("FW Ver: %d\n"),(int)g.k_format_version);
Binary file setup.cpp.o matches
switches.cpp:    gcs_send_text_P(SEVERITY_HIGH, PSTR("Trim saved"));
Binary file switches.cpp.o matches
system.cpp:    cliSerial->printf_P(PSTR("Commands:\n"
system.cpp:    cliSerial->printf_P(PSTR("\n\nInit " FIRMWARE_STRING
system.cpp:        const prog_char_t *msg = PSTR("\nPress ENTER 3 times to start interactive setup\n");
system.cpp:        gcs_send_text_P(SEVERITY_LOW, PSTR("Waiting for first HIL_STATE message"));
system.cpp:    cliSerial->print_P(PSTR("\nReady to FLY "));
system.cpp:    gcs_send_text_P(SEVERITY_LOW,PSTR("GROUND START"));
Binary file system.cpp.o matches
Binary file takeoff.cpp.o matches
test.cpp:            cliSerial->println_P(PSTR("not healthy"));
test.cpp:            cliSerial->printf_P(PSTR("Alt: %0.2fm, Raw: %f Temperature: %.1f\n"),
test.cpp:        cliSerial->printf_P(PSTR("Compass: "));
test.cpp:        cliSerial->println_P(PSTR("Compass initialisation failed!"));
test.cpp:                    cliSerial->printf_P(PSTR("Heading: %ld, XYZ: %.0f, %.0f, %.0f,\tXYZoff: %6.2f, %6.2f, %6.2f\n"),
test.cpp:                    cliSerial->println_P(PSTR("compass not healthy"));
test.cpp:    cliSerial->println_P(PSTR("saving offsets"));
test.cpp:    cliSerial->printf_P(PSTR("INS\n"));
test.cpp:    cliSerial->printf_P(PSTR("...done\n"));
test.cpp:        cliSerial->printf_P(PSTR("a %7.4f %7.4f %7.4f g %7.4f %7.4f %7.4f t %7.4f \n"),
test.cpp:        cliSerial->printf_P(PSTR("dev id: %d\t"),(int)optflow.device_id());
test.cpp:            cliSerial->printf_P(PSTR("flowX : %7.4f\t flowY : %7.4f\t flow qual : %d\n"),
test.cpp:        cliSerial->printf_P(PSTR("OptFlow: "));
test.cpp:        cliSerial->printf_P(PSTR("Relay on\n"));
test.cpp:        cliSerial->printf_P(PSTR("Relay off\n"));
test.cpp:    cliSerial->printf_P(PSTR("RangeFinder: %d devices detected\n"), sonar.num_sensors());
test.cpp:        cliSerial->printf_P(PSTR("Primary: status %d distance_cm %d \n"), (int)sonar.status(), sonar.distance_cm());
test.cpp:        cliSerial->printf_P(PSTR("All: device_0 type %d status %d distance_cm %d, device_1 type %d status %d distance_cm %d\n"),
test.cpp:    cliSerial->printf_P(PSTR("Hit Enter to exit.\n\n"));
Binary file test.cpp.o matches
Binary file tuning.cpp.o matches
Binary file UserCode.cpp.o matches
